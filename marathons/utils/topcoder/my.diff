diff -urN topcoderTheir/ErrorReader.java topcoderMy/ErrorReader.java
--- topcoderTheir/ErrorReader.java
+++ topcoderMy/ErrorReader.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.io.BufferedWriter;
 import java.io.InputStream;
diff -urN topcoderTheir/MarathonAnimatedVis.java topcoderMy/MarathonAnimatedVis.java
--- topcoderTheir/MarathonAnimatedVis.java
+++ topcoderMy/MarathonAnimatedVis.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.awt.event.KeyAdapter;
 import java.awt.event.KeyEvent;
diff -urN topcoderTheir/MarathonController.java topcoderMy/MarathonController.java
--- topcoderTheir/MarathonController.java
+++ topcoderMy/MarathonController.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
@@ -9,10 +9,12 @@
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;
 import java.text.DecimalFormat;
+import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
+import marathons.utils.Evaluator;
 
 /**
  * Main entry point of the Marathon tester. It handles parameter and calls the solution.
@@ -25,8 +27,8 @@
 public class MarathonController {
 	private final Object statsLock = new Object();
 	private long maxRunTime, avgRunTime;
-	private int numFails, numCases, numImproved, numTied, numNew;
-	private double prevTotScore, currTotScore;
+	private int numFails, numCases, numImproved, numTied, numNew, numTroubles;
+	private double prevTotScore, currTotScore, myScoresSum;
 	private static final double eps = 1e-9;
 
 	private Parameters parseArgs(String[] args) {
@@ -146,6 +148,8 @@
 
 	//Called by local tester, passing command line parameters
 	public final void run(String[] args) {
+		Evaluator.requireEnablesAssertions();
+
 		//Find the name of the concrete class (actual MarathonTester) to be called using reflection
 		String className = new Exception().getStackTrace()[1].getClassName();
 
@@ -305,10 +309,17 @@
 
 							double score = tester.runTest();
 							long runTime = tester.getRunTime();
+							myScoresSum += tester.myScore;
+							if (!tester.getExecutionsErrors().isEmpty()) tester.myTroubles.addAll(Arrays.asList(tester.getExecutionsErrors().split("\n")));
 
 							sb.delete(0, sb.length());
-							if (multipleSeeds) sb.append("Seed = ").append(seed).append(", ");
-							sb.append("Score = ").append(score);
+							if (multipleSeeds) sb.append("Seed = ").append(seed).append(",\t");
+							sb.append("Score = ").append(score).append(",\t");
+							if (tester.myScore != 0) sb.append("MyScore = ").append(Evaluator.round(tester.myScore, 2)).append(",\t");
+							if (!tester.myTroubles.isEmpty()) {
+								numTroubles++;
+								sb.append(tester.myTroubles);
+							}
 							Double best = checkBest(bestsFile, isMaximize, errorScore, seed, score);
 							if (best != null) sb.append(", PreviousBest = ").append(best);
 							if (printRuntime) sb.append(", RunTime = ").append(runTime).append(" ms");
@@ -359,6 +370,7 @@
 		if (multipleSeeds && !parameters.isDefined(Parameters.noSummary)) {
 			avgRunTime /= numCases;
 			System.out.println();
+			System.out.println("  Average MyScore: " + Evaluator.round(myScoresSum / numCases, 2));
 			System.out.println("            Seeds: " + seedsProcessed);
 			System.out.println("   Executed Cases: " + numCases);
 			System.out.println("     Failed Cases: " + numFails);
@@ -377,6 +389,10 @@
 				currTotScore /= numCases;
 				System.out.println("    Current Score: " + df.format(currTotScore * 100));
 			}
+			if (numTroubles > 0) {
+				String s = numTroubles + " TROUBLES!";
+				System.out.println(s); System.err.println(s);
+			}
 		}
 	}
 }
diff -urN topcoderTheir/MarathonTester.java topcoderMy/MarathonTester.java
--- topcoderTheir/MarathonTester.java
+++ topcoderMy/MarathonTester.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
@@ -20,6 +20,9 @@
  * problems with no visualization. Updated: 2020/09/28
  */
 public abstract class MarathonTester {
+	public double myScore;
+	public ArrayList<String> myTroubles = new ArrayList<>();
+	public ArrayList<String> myLabels = new ArrayList<>();
 	protected Parameters parameters;
 	protected boolean debug;
 	protected long seed;
@@ -250,13 +253,13 @@
 	}
 
 	protected final double fatalError() {
-		System.out.println(errorMessage);
+		if (debug) System.out.println(errorMessage);
 		executionErrors.append(errorMessage).append("\n");
 		return getErrorScore();
 	}
 
 	protected final double fatalError(String msg) {
-		System.out.println(msg);
+		if (debug) System.out.println(msg);
 		executionErrors.append(msg).append("\n");
 		return getErrorScore();
 	}
diff -urN topcoderTheir/MarathonTestResult.java topcoderMy/MarathonTestResult.java
--- topcoderTheir/MarathonTestResult.java
+++ topcoderMy/MarathonTestResult.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 public class MarathonTestResult {
 	private String error;
diff -urN topcoderTheir/MarathonVis.java topcoderMy/MarathonVis.java
--- topcoderTheir/MarathonVis.java
+++ topcoderMy/MarathonVis.java
@@ -1,4 +1,6 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
+
+import marathons.utils.Pictures;
 
 import java.awt.BasicStroke;
 import java.awt.Color;
@@ -16,6 +18,8 @@
 import java.awt.RenderingHints;
 import java.awt.Shape;
 import java.awt.Toolkit;
+import java.awt.event.KeyAdapter;
+import java.awt.event.KeyEvent;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
 import java.awt.event.WindowAdapter;
@@ -119,7 +123,21 @@
 	}
 
 	protected void update() {
+		update(false);
+	}
+
+	protected void update(boolean isInit) {
 		if (!vis) return;
+		if (parameters.isDefined(Parameters.myVis)) {
+			if (isInit) return;
+			int width = 1000;
+			int height = 800;
+			infoFontWidth = infoFontHeight = 12;
+			BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
+			paintVis(image.getGraphics(), width, height);
+			Pictures.write(image, seed, "");
+			return;
+		}
 		synchronized (updateLock) {
 			if (frame == null) {
 				String className = getClass().getName();
@@ -143,6 +161,12 @@
 						end();
 					}
 				});
+				frame.addKeyListener(new KeyAdapter() {
+					@Override
+					public void keyPressed(KeyEvent e) {
+						if (e.getKeyCode() == KeyEvent.VK_ESCAPE) System.exit(0);
+					}
+				});
 
 				panel = new JPanel() {
 					private static final long serialVersionUID = -1008231133177413855L;
@@ -440,7 +464,7 @@
 		Graphics2D g2 = (Graphics2D) g;
 		g2.setColor(new Color(230, 230, 232));
 		g2.fillRect(0, 0, w, h);
-		g2.setRenderingHints(hints);
+		if (!parameters.isDefined(Parameters.myVis)) g2.setRenderingHints(hints);
 
 		synchronized (updateLock) {
 			if (infoColumns > 0 && infoFontWidth > 0) paintInfo(g2, w);
diff -urN topcoderTheir/Parameters.java topcoderMy/Parameters.java
--- topcoderTheir/Parameters.java
+++ topcoderMy/Parameters.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -16,6 +16,8 @@
 	public static final String exec = "exec";
 	public static final String infoScale = "infoScale";
 	public static final String loadSolOutput = "loadSolOutput";
+	public static final String myExec = "myExec";
+	public static final String myVis = "myVis";
 	public static final String noAntialiasing = "noAntialiasing";
 	public static final String noOutput = "noOutput";
 	public static final String noSummary = "noSummary";
