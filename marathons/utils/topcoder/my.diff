diff -urN topcoderTheir/ErrorReader.java topcoderMy/ErrorReader.java
--- topcoderTheir/ErrorReader.java
+++ topcoderMy/ErrorReader.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.io.BufferedWriter;
 import java.io.InputStream;
diff -urN topcoderTheir/MarathonAnimatedVis.java topcoderMy/MarathonAnimatedVis.java
--- topcoderTheir/MarathonAnimatedVis.java
+++ topcoderMy/MarathonAnimatedVis.java
@@ -1,4 +1,6 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
+
+import marathons.utils.Evaluator;
 
 import java.awt.BasicStroke;
 import java.awt.Color;
@@ -384,7 +386,7 @@
 	}
 
 	protected final boolean hasDelay() {
-		return delay > 0;
+		return delay > 0 && !Evaluator._visOnlyFile;
 	}
 
 	protected final int getDelay() {
diff -urN topcoderTheir/MarathonController.java topcoderMy/MarathonController.java
--- topcoderTheir/MarathonController.java
+++ topcoderMy/MarathonController.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
@@ -10,10 +10,13 @@
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;
 import java.text.DecimalFormat;
+import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
+import marathons.utils.Evaluator;
+import marathons.utils.Pictures;
 
 /**
  * Main entry point of the Marathon tester. It handles parameter and calls the solution.
@@ -26,14 +29,15 @@
 public class MarathonController {
 	private final Object statsLock = new Object();
 	private long maxRunTime, avgRunTime;
-	private int numFails, numCases, numImproved, numTied, numNew;
-	private double prevTotScore, currTotScore;
+	private int numFails, numCases, numImproved, numTied, numNew, numTroubles;
+	private double prevTotScore, currTotScore, myScoresSum;
 	private static final double eps = 1e-9;
 
 	private Parameters parseArgs(String[] args) {
 		Parameters parameters = new Parameters();
 		String last = null;
 		for (String s : args) {
+			if (s.startsWith("#")) continue;
 			if (!s.startsWith("-")) {
 				if (last == null) {
 					System.out.println("ERROR: Invalid command line parameters!");
@@ -147,6 +151,8 @@
 
 	//Called by local tester, passing command line parameters
 	public final void run(String[] args) {
+		Evaluator.requireEnablesAssertions();
+
 		//Find the name of the concrete class (actual MarathonTester) to be called using reflection
 		String className = new Exception().getStackTrace()[1].getClassName();
 
@@ -274,6 +280,7 @@
 			e.printStackTrace();
 			System.exit(-1);
 		}
+		Evaluator._project = c.getPackage().getName();
 		Constructor<?> constructor = ct;
 		double errorScore = es;
 		boolean isMaximize = im;
@@ -306,10 +313,19 @@
 
 							double score = tester.runTest();
 							long runTime = tester.getRunTime();
+							myScoresSum += tester.myScore;
+							if (!tester.getExecutionsErrors().isEmpty()) tester.myTroubles.addAll(Arrays.asList(tester.getExecutionsErrors().split("\n")));
 
 							sb.delete(0, sb.length());
-							if (multipleSeeds) sb.append("Seed = ").append(seed).append(", ");
-							sb.append("Score = ").append(score);
+							if (multipleSeeds) sb.append("Seed = ").append(seed).append(",\t");
+							sb.append("Time = ").append(runTime).append(",\t");
+							sb.append("Score = ").append(score).append(",\t");
+							if (tester.myScore != 0) sb.append("MyScore = ").append(Evaluator.round(tester.myScore, 2)).append(",\t");
+							if (!tester.myTroubles.isEmpty()) {
+								numTroubles++;
+								sb.append(tester.myTroubles).append("\t");
+							}
+							for (String label : tester.myLabels) sb.append(label).append("\t");
 							Double best = checkBest(bestsFile, isMaximize, errorScore, seed, score);
 							if (best != null) sb.append(", PreviousBest = ").append(best);
 							if (printRuntime) sb.append(", RunTime = ").append(runTime).append(" ms");
@@ -360,6 +376,7 @@
 		if (multipleSeeds && !parameters.isDefined(Parameters.noSummary)) {
 			avgRunTime /= numCases;
 			System.out.println();
+			System.out.println("  Average MyScore: " + Evaluator.round(myScoresSum / numCases, 2));
 			System.out.println("            Seeds: " + seedsProcessed);
 			System.out.println("   Executed Cases: " + numCases);
 			System.out.println("     Failed Cases: " + numFails);
@@ -378,6 +395,11 @@
 				currTotScore /= numCases;
 				System.out.println("    Current Score: " + df.format(currTotScore * 100));
 			}
+			Pictures.remind();
+			if (numTroubles > 0) {
+				String s = numTroubles + " TROUBLES!";
+				System.out.println(s); System.err.println(s);
+			}
 		}
 	}
 }
diff -urN topcoderTheir/MarathonTester.java topcoderMy/MarathonTester.java
--- topcoderTheir/MarathonTester.java
+++ topcoderMy/MarathonTester.java
@@ -1,4 +1,6 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
+
+import marathons.utils.Evaluator;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
@@ -24,6 +26,9 @@
  * startTime() and stopTime() methods.
  */
 public abstract class MarathonTester {
+	public double myScore;
+	public ArrayList<String> myTroubles = new ArrayList<>();
+	public ArrayList<String> myLabels = new ArrayList<>();
 	protected Parameters parameters;
 	protected boolean debug;
 	protected long seed;
@@ -57,6 +62,7 @@
 
 	public void setSeed(long seed) {
 		this.seed = seed;
+		Evaluator._seed = seed;
 		try {
 			rnd = SecureRandom.getInstance("SHA1PRNG");
 			rnd.setSeed(seed);
@@ -158,7 +164,7 @@
 				}
 			}
 			end();
-		} catch (Exception e) {
+		} catch (Throwable e) {
 			stopTime();
 			if (!timeout && !ending) {
 				String msg = "";
@@ -254,13 +260,13 @@
 	}
 
 	protected final double fatalError() {
-		System.out.println(errorMessage);
+		if (debug) System.out.println(errorMessage);
 		executionErrors.append(errorMessage).append("\n");
 		return getErrorScore();
 	}
 
 	protected final double fatalError(String msg) {
-		System.out.println(msg);
+		if (debug) System.out.println(msg);
 		executionErrors.append(msg).append("\n");
 		return getErrorScore();
 	}
diff -urN topcoderTheir/MarathonTestResult.java topcoderMy/MarathonTestResult.java
--- topcoderTheir/MarathonTestResult.java
+++ topcoderMy/MarathonTestResult.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 public class MarathonTestResult {
 	private String error;
diff -urN topcoderTheir/MarathonVis.java topcoderMy/MarathonVis.java
--- topcoderTheir/MarathonVis.java
+++ topcoderMy/MarathonVis.java
@@ -1,4 +1,7 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
+
+import marathons.utils.Evaluator;
+import marathons.utils.Pictures;
 
 import java.awt.BasicStroke;
 import java.awt.Color;
@@ -16,6 +19,8 @@
 import java.awt.RenderingHints;
 import java.awt.Shape;
 import java.awt.Toolkit;
+import java.awt.event.KeyAdapter;
+import java.awt.event.KeyEvent;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
 import java.awt.event.WindowAdapter;
@@ -65,14 +70,13 @@
 public abstract class MarathonVis extends MarathonTester {
 	protected final Object updateLock = new Object();
 	protected JFrame frame;
-	private boolean vis = true;
 	private JPanel panel;
 	private Font infoFontPlain, infoFontBold;
 	private final Map<Object, Object> infoMap = new HashMap<Object, Object>();
 	private final Map<Object, Boolean> infoChecked = new HashMap<Object, Boolean>();
 	private final Map<Object, Rectangle2D> infoRects = new HashMap<Object, Rectangle2D>();
 	private final List<Object> infoSequence = new ArrayList<Object>();
-	protected int border, infoFontWidth, infoFontHeight, infoColumns, infoLines;
+	protected int border, infoFontWidth = Pictures.infoFontWidth, infoFontHeight = Pictures.infoFontHeight, infoColumns, infoLines;
 	private double size = -1;
 	private Rectangle2D contentRect = new Rectangle2D.Double(0, 0, 100, 100);
 	private Rectangle2D contentScreen = new Rectangle2D.Double();
@@ -92,21 +96,22 @@
 
 	public void setParameters(Parameters parameters) {
 		super.setParameters(parameters);
-		if (parameters.isDefined(Parameters.noVis)) {
+		Evaluator._visOnlyFile = parameters.isDefined(Parameters.fileVis);
+		Evaluator._visScreen = !Evaluator._visOnlyFile && !parameters.isDefined(Parameters.noVis);
+		if (!Evaluator._visScreen) {
 			System.setProperty("java.awt.headless", "true");
-			vis = false;
 		}
 		if (parameters.isDefined(Parameters.size)) size = parameters.getIntValue(Parameters.size);
 	}
 
 	protected void setInfoMaxDimension(int infoColumns, int infoLines) {
-		if (!vis) return;
+		if (!hasVis()) return;
 		this.infoColumns = infoColumns;
 		this.infoLines = infoLines;
 	}
 
 	protected final void setContentRect(double xLeft, double yTop, double xRight, double yBottom) {
-		if (!vis) return;
+		if (!hasVis()) return;
 		contentRect.setRect(xLeft, yTop, xRight - xLeft, yBottom - yTop);
 	}
 
@@ -115,11 +120,15 @@
 	}
 
 	protected final boolean hasVis() {
-		return vis;
+		return Evaluator._visScreen || Evaluator._visOnlyFile;
 	}
 
 	protected void update() {
-		if (!vis) return;
+		if (!hasVis()) return;
+		if (Evaluator._visOnlyFile) {
+			Pictures.write(graphics -> paintVis(graphics, Pictures.width, Pictures.height, true));
+			return;
+		}
 		synchronized (updateLock) {
 			if (frame == null) {
 				String className = getClass().getName();
@@ -143,6 +152,12 @@
 						end();
 					}
 				});
+				frame.addKeyListener(new KeyAdapter() {
+					@Override
+					public void keyPressed(KeyEvent e) {
+						if (e.getKeyCode() == KeyEvent.VK_ESCAPE) System.exit(0);
+					}
+				});
 
 				panel = new JPanel() {
 					private static final long serialVersionUID = -1008231133177413855L;
@@ -186,7 +201,7 @@
 				try {
 					SwingUtilities.invokeAndWait(new Runnable() {
 						public void run() {
-							frame.setSize(1000, 800);
+							frame.setSize(Pictures.width, Pictures.height);
 							frame.setTitle(className + " - Seed: " + seed);
 							frame.setIconImage(getIcon());
 							frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
@@ -412,33 +427,33 @@
 	}
 
 	protected final void addInfo(Object key, Object value) {
-		if (!vis) return;
+		if (!hasVis()) return;
 		if (!infoMap.containsKey(key)) infoSequence.add(key);
 		infoMap.put(key, value);
 	}
 
 	protected final void addInfo(Object key) {
-		if (!vis) return;
+		if (!hasVis()) return;
 		if (!infoMap.containsKey(key)) infoSequence.add(key);
 		infoMap.put(key, null);
 	}
 
 	protected final void addInfo(Object key, Object value, boolean checked) {
-		if (!vis) return;
+		if (!hasVis()) return;
 		if (!infoMap.containsKey(key)) infoSequence.add(key);
 		infoMap.put(key, value);
 		infoChecked.put(key, checked);
 	}
 
 	protected final void addInfo(Object key, boolean checked) {
-		if (!vis) return;
+		if (!hasVis()) return;
 		if (!infoMap.containsKey(key)) infoSequence.add(key);
 		infoMap.put(key, null);
 		infoChecked.put(key, checked);
 	}
 
 	protected final void addInfoBreak() {
-		if (!vis) return;
+		if (!hasVis()) return;
 		infoSequence.add(null);
 	}
 
@@ -457,7 +472,7 @@
 		Graphics2D g2 = (Graphics2D) g;
 		g2.setColor(new Color(230, 230, 232));
 		g2.fillRect(0, 0, w, h);
-		g2.setRenderingHints(hints);
+		if (hints != null) g2.setRenderingHints(hints);
 		synchronized (updateLock) {
 			if (infoColumns > 0 && infoFontWidth > 0) paintInfo(g2, w, isSave);
 			paintCenter(g2, infoFontWidth == 0 ? w : w - infoFontWidth * infoColumns - border, h, isSave);
diff -urN topcoderTheir/Parameters.java topcoderMy/Parameters.java
--- topcoderTheir/Parameters.java
+++ topcoderMy/Parameters.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -15,13 +15,17 @@
 	public static final String debug = "debug";
 	public static final String delay = "delay";
 	public static final String exec = "exec";
+	public static final String fileVis = "fileVis";
 	public static final String infoScale = "infoScale";
 	public static final String loadSolOutput = "loadSolOutput";
+	public static final String myExec = "myExec";
+	public static final String myVis = "myVis";
+	public static final String myGen = "myGen";
 	public static final String noAntialiasing = "noAntialiasing";
 	public static final String noOutput = "noOutput";
 	public static final String noReplay = "noReplay";
 	public static final String noSummary = "noSummary";
-	public static final String noVis = "novis";
+	public static final String noVis = "noVis";
 	public static final String paintInfo = "paintInfo";
 	public static final String printRuntime = "printRuntime";
 	public static final String saveAll = "saveAll";
diff -urN topcoderTheir/RecordableGraphics.java topcoderMy/RecordableGraphics.java
--- topcoderTheir/RecordableGraphics.java
+++ topcoderMy/RecordableGraphics.java
@@ -1,4 +1,4 @@
-package marathons.utils.topcoderTheir;
+package marathons.utils.topcoderMy;
 
 import java.awt.Color;
 import java.awt.Composite;
